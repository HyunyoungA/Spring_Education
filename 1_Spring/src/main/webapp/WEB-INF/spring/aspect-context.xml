<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- LoggerAspect1 빈등록 -->
<!-- 	<bean id="loggerAspect" class="com.kh.spring.common.aop.LoggerAspect1"/> -->

	<!-- ========선언적 AOP 시작========== -->
	<!--* com. 앞에  *는 반환값이다 /  *(..) 모든 매개변수 -->
<!-- 	<aop:config> -->
<!-- 		<aop:aspect id="loggerAspect" ref="loggerAspect"> -->
<!-- 			<aop:pointcut expression="execution(* com.kh.spring..*(..))" id="pcForAll"/> -->
<!-- 			<aop:before method="loggerAdvice" pointcut-ref="pcForAll"/> -->
<!-- 			<aop:around method="loggerAdvice" pointcut-ref="pcForAll"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->
	<!-- ========선언적 AOP 끝========== -->
	<!-- ==========프로그래밍적 AOP 시작=========== 선언적aop처럼 진행이 가능하다 이게 있어서 인지가능-->
	<aop:aspectj-autoproxy/>
	<!-- ==========프로그래밍적 AOP 끝=========== -->
	<!-- root-context에 있는 이름을 가져오는거다 /  read-only="true" 조회는 가져오기 때문에 가능하지만 다른 db정보변경은 불가능하다 -->
	<!-- 디폴트는 false이다 -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="selectBoard" read-only="true"/> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
	
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut expression="execution(* com.kh.spring.board..*(..))" id="boardTx"/> -->
<!-- 		<aop:advisor advice-ref="txAdvice" pointcut-ref="boardTx"/> -->
<!-- 	</aop:config> -->
	
	<tx:annotation-driven/>
	
	
	

</beans>
